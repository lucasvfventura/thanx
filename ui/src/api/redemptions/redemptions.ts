/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * API V1
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetRedemptions200,
  GetRedemptionsId200,
  PostRedemptions200,
  PostRedemptions404,
  PostRedemptions422,
  PostRedemptionsBody
} from '.././model';





/**
 * @summary list redemptions
 */
export type getRedemptionsResponse200 = {
  data: GetRedemptions200
  status: 200
}
    
export type getRedemptionsResponseComposite = getRedemptionsResponse200;
    
export type getRedemptionsResponse = getRedemptionsResponseComposite & {
  headers: Headers;
}

export const getGetRedemptionsUrl = () => {


  

  return `http://localhost:3000/redemptions`
}

export const getRedemptions = async ( options?: RequestInit): Promise<getRedemptionsResponse> => {
  
  const res = await fetch(getGetRedemptionsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRedemptionsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getRedemptionsResponse
}



export const getGetRedemptionsQueryKey = () => {
    return [`http://localhost:3000/redemptions`] as const;
    }

    
export const getGetRedemptionsQueryOptions = <TData = Awaited<ReturnType<typeof getRedemptions>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptions>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRedemptionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRedemptions>>> = ({ signal }) => getRedemptions({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRedemptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRedemptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getRedemptions>>>
export type GetRedemptionsQueryError = unknown


export function useGetRedemptions<TData = Awaited<ReturnType<typeof getRedemptions>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRedemptions>>,
          TError,
          Awaited<ReturnType<typeof getRedemptions>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRedemptions<TData = Awaited<ReturnType<typeof getRedemptions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRedemptions>>,
          TError,
          Awaited<ReturnType<typeof getRedemptions>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRedemptions<TData = Awaited<ReturnType<typeof getRedemptions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptions>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary list redemptions
 */

export function useGetRedemptions<TData = Awaited<ReturnType<typeof getRedemptions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptions>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRedemptionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary create redemption
 */
export type postRedemptionsResponse200 = {
  data: PostRedemptions200
  status: 200
}

export type postRedemptionsResponse404 = {
  data: PostRedemptions404
  status: 404
}

export type postRedemptionsResponse422 = {
  data: PostRedemptions422
  status: 422
}
    
export type postRedemptionsResponseComposite = postRedemptionsResponse200 | postRedemptionsResponse404 | postRedemptionsResponse422;
    
export type postRedemptionsResponse = postRedemptionsResponseComposite & {
  headers: Headers;
}

export const getPostRedemptionsUrl = () => {


  

  return `http://localhost:3000/redemptions`
}

export const postRedemptions = async (postRedemptionsBody: PostRedemptionsBody, options?: RequestInit): Promise<postRedemptionsResponse> => {
  
  const res = await fetch(getPostRedemptionsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postRedemptionsBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postRedemptionsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postRedemptionsResponse
}




export const getPostRedemptionsMutationOptions = <TError = PostRedemptions404 | PostRedemptions422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRedemptions>>, TError,{data: PostRedemptionsBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postRedemptions>>, TError,{data: PostRedemptionsBody}, TContext> => {
    
const mutationKey = ['postRedemptions'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRedemptions>>, {data: PostRedemptionsBody}> = (props) => {
          const {data} = props ?? {};

          return  postRedemptions(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRedemptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postRedemptions>>>
    export type PostRedemptionsMutationBody = PostRedemptionsBody
    export type PostRedemptionsMutationError = PostRedemptions404 | PostRedemptions422

    /**
 * @summary create redemption
 */
export const usePostRedemptions = <TError = PostRedemptions404 | PostRedemptions422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRedemptions>>, TError,{data: PostRedemptionsBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postRedemptions>>,
        TError,
        {data: PostRedemptionsBody},
        TContext
      > => {

      const mutationOptions = getPostRedemptionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary show redemption
 */
export type getRedemptionsIdResponse200 = {
  data: GetRedemptionsId200
  status: 200
}

export type getRedemptionsIdResponse404 = {
  data: void
  status: 404
}
    
export type getRedemptionsIdResponseComposite = getRedemptionsIdResponse200 | getRedemptionsIdResponse404;
    
export type getRedemptionsIdResponse = getRedemptionsIdResponseComposite & {
  headers: Headers;
}

export const getGetRedemptionsIdUrl = (id: number,) => {


  

  return `http://localhost:3000/redemptions/${id}`
}

export const getRedemptionsId = async (id: number, options?: RequestInit): Promise<getRedemptionsIdResponse> => {
  
  const res = await fetch(getGetRedemptionsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRedemptionsIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getRedemptionsIdResponse
}



export const getGetRedemptionsIdQueryKey = (id: number,) => {
    return [`http://localhost:3000/redemptions/${id}`] as const;
    }

    
export const getGetRedemptionsIdQueryOptions = <TData = Awaited<ReturnType<typeof getRedemptionsId>>, TError = void>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptionsId>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRedemptionsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRedemptionsId>>> = ({ signal }) => getRedemptionsId(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRedemptionsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRedemptionsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRedemptionsId>>>
export type GetRedemptionsIdQueryError = void


export function useGetRedemptionsId<TData = Awaited<ReturnType<typeof getRedemptionsId>>, TError = void>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptionsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRedemptionsId>>,
          TError,
          Awaited<ReturnType<typeof getRedemptionsId>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRedemptionsId<TData = Awaited<ReturnType<typeof getRedemptionsId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptionsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRedemptionsId>>,
          TError,
          Awaited<ReturnType<typeof getRedemptionsId>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRedemptionsId<TData = Awaited<ReturnType<typeof getRedemptionsId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptionsId>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary show redemption
 */

export function useGetRedemptionsId<TData = Awaited<ReturnType<typeof getRedemptionsId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRedemptionsId>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRedemptionsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



