/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * API V1
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PatchAuthenticationChangePassword200,
  PatchAuthenticationChangePassword401,
  PatchAuthenticationChangePassword422,
  PatchAuthenticationChangePasswordBody,
  PostAuthenticationLogin200,
  PostAuthenticationLogin401,
  PostAuthenticationLoginBody,
  PostAuthenticationRefresh200,
  PostAuthenticationRefresh401,
  PostAuthenticationRefreshBody,
  PostAuthenticationSignup200,
  PostAuthenticationSignup422,
  PostAuthenticationSignupBody
} from '.././model';





/**
 * @summary User login
 */
export type postAuthenticationLoginResponse200 = {
  data: PostAuthenticationLogin200
  status: 200
}

export type postAuthenticationLoginResponse401 = {
  data: PostAuthenticationLogin401
  status: 401
}
    
export type postAuthenticationLoginResponseComposite = postAuthenticationLoginResponse200 | postAuthenticationLoginResponse401;
    
export type postAuthenticationLoginResponse = postAuthenticationLoginResponseComposite & {
  headers: Headers;
}

export const getPostAuthenticationLoginUrl = () => {


  

  return `http://localhost:3000/authentication/login`
}

export const postAuthenticationLogin = async (postAuthenticationLoginBody: PostAuthenticationLoginBody, options?: RequestInit): Promise<postAuthenticationLoginResponse> => {
  
  const res = await fetch(getPostAuthenticationLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAuthenticationLoginBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postAuthenticationLoginResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postAuthenticationLoginResponse
}




export const getPostAuthenticationLoginMutationOptions = <TError = PostAuthenticationLogin401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthenticationLogin>>, TError,{data: PostAuthenticationLoginBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthenticationLogin>>, TError,{data: PostAuthenticationLoginBody}, TContext> => {
    
const mutationKey = ['postAuthenticationLogin'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthenticationLogin>>, {data: PostAuthenticationLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthenticationLogin(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthenticationLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthenticationLogin>>>
    export type PostAuthenticationLoginMutationBody = PostAuthenticationLoginBody
    export type PostAuthenticationLoginMutationError = PostAuthenticationLogin401

    /**
 * @summary User login
 */
export const usePostAuthenticationLogin = <TError = PostAuthenticationLogin401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthenticationLogin>>, TError,{data: PostAuthenticationLoginBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthenticationLogin>>,
        TError,
        {data: PostAuthenticationLoginBody},
        TContext
      > => {

      const mutationOptions = getPostAuthenticationLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Refresh JWT
 */
export type postAuthenticationRefreshResponse200 = {
  data: PostAuthenticationRefresh200
  status: 200
}

export type postAuthenticationRefreshResponse401 = {
  data: PostAuthenticationRefresh401
  status: 401
}
    
export type postAuthenticationRefreshResponseComposite = postAuthenticationRefreshResponse200 | postAuthenticationRefreshResponse401;
    
export type postAuthenticationRefreshResponse = postAuthenticationRefreshResponseComposite & {
  headers: Headers;
}

export const getPostAuthenticationRefreshUrl = () => {


  

  return `http://localhost:3000/authentication/refresh`
}

export const postAuthenticationRefresh = async (postAuthenticationRefreshBody: PostAuthenticationRefreshBody, options?: RequestInit): Promise<postAuthenticationRefreshResponse> => {
  
  const res = await fetch(getPostAuthenticationRefreshUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAuthenticationRefreshBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postAuthenticationRefreshResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postAuthenticationRefreshResponse
}




export const getPostAuthenticationRefreshMutationOptions = <TError = PostAuthenticationRefresh401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthenticationRefresh>>, TError,{data: PostAuthenticationRefreshBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthenticationRefresh>>, TError,{data: PostAuthenticationRefreshBody}, TContext> => {
    
const mutationKey = ['postAuthenticationRefresh'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthenticationRefresh>>, {data: PostAuthenticationRefreshBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthenticationRefresh(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthenticationRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthenticationRefresh>>>
    export type PostAuthenticationRefreshMutationBody = PostAuthenticationRefreshBody
    export type PostAuthenticationRefreshMutationError = PostAuthenticationRefresh401

    /**
 * @summary Refresh JWT
 */
export const usePostAuthenticationRefresh = <TError = PostAuthenticationRefresh401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthenticationRefresh>>, TError,{data: PostAuthenticationRefreshBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthenticationRefresh>>,
        TError,
        {data: PostAuthenticationRefreshBody},
        TContext
      > => {

      const mutationOptions = getPostAuthenticationRefreshMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Change user password
 */
export type patchAuthenticationChangePasswordResponse200 = {
  data: PatchAuthenticationChangePassword200
  status: 200
}

export type patchAuthenticationChangePasswordResponse401 = {
  data: PatchAuthenticationChangePassword401
  status: 401
}

export type patchAuthenticationChangePasswordResponse422 = {
  data: PatchAuthenticationChangePassword422
  status: 422
}
    
export type patchAuthenticationChangePasswordResponseComposite = patchAuthenticationChangePasswordResponse200 | patchAuthenticationChangePasswordResponse401 | patchAuthenticationChangePasswordResponse422;
    
export type patchAuthenticationChangePasswordResponse = patchAuthenticationChangePasswordResponseComposite & {
  headers: Headers;
}

export const getPatchAuthenticationChangePasswordUrl = () => {


  

  return `http://localhost:3000/authentication/change_password`
}

export const patchAuthenticationChangePassword = async (patchAuthenticationChangePasswordBody: PatchAuthenticationChangePasswordBody, options?: RequestInit): Promise<patchAuthenticationChangePasswordResponse> => {
  
  const res = await fetch(getPatchAuthenticationChangePasswordUrl(),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchAuthenticationChangePasswordBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: patchAuthenticationChangePasswordResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as patchAuthenticationChangePasswordResponse
}




export const getPatchAuthenticationChangePasswordMutationOptions = <TError = PatchAuthenticationChangePassword401 | PatchAuthenticationChangePassword422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAuthenticationChangePassword>>, TError,{data: PatchAuthenticationChangePasswordBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchAuthenticationChangePassword>>, TError,{data: PatchAuthenticationChangePasswordBody}, TContext> => {
    
const mutationKey = ['patchAuthenticationChangePassword'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAuthenticationChangePassword>>, {data: PatchAuthenticationChangePasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  patchAuthenticationChangePassword(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAuthenticationChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof patchAuthenticationChangePassword>>>
    export type PatchAuthenticationChangePasswordMutationBody = PatchAuthenticationChangePasswordBody
    export type PatchAuthenticationChangePasswordMutationError = PatchAuthenticationChangePassword401 | PatchAuthenticationChangePassword422

    /**
 * @summary Change user password
 */
export const usePatchAuthenticationChangePassword = <TError = PatchAuthenticationChangePassword401 | PatchAuthenticationChangePassword422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAuthenticationChangePassword>>, TError,{data: PatchAuthenticationChangePasswordBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchAuthenticationChangePassword>>,
        TError,
        {data: PatchAuthenticationChangePasswordBody},
        TContext
      > => {

      const mutationOptions = getPatchAuthenticationChangePasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary User sign up
 */
export type postAuthenticationSignupResponse200 = {
  data: PostAuthenticationSignup200
  status: 200
}

export type postAuthenticationSignupResponse422 = {
  data: PostAuthenticationSignup422
  status: 422
}
    
export type postAuthenticationSignupResponseComposite = postAuthenticationSignupResponse200 | postAuthenticationSignupResponse422;
    
export type postAuthenticationSignupResponse = postAuthenticationSignupResponseComposite & {
  headers: Headers;
}

export const getPostAuthenticationSignupUrl = () => {


  

  return `http://localhost:3000/authentication/signup`
}

export const postAuthenticationSignup = async (postAuthenticationSignupBody: PostAuthenticationSignupBody, options?: RequestInit): Promise<postAuthenticationSignupResponse> => {
  
  const res = await fetch(getPostAuthenticationSignupUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAuthenticationSignupBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postAuthenticationSignupResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postAuthenticationSignupResponse
}




export const getPostAuthenticationSignupMutationOptions = <TError = PostAuthenticationSignup422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthenticationSignup>>, TError,{data: PostAuthenticationSignupBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthenticationSignup>>, TError,{data: PostAuthenticationSignupBody}, TContext> => {
    
const mutationKey = ['postAuthenticationSignup'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthenticationSignup>>, {data: PostAuthenticationSignupBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthenticationSignup(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthenticationSignupMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthenticationSignup>>>
    export type PostAuthenticationSignupMutationBody = PostAuthenticationSignupBody
    export type PostAuthenticationSignupMutationError = PostAuthenticationSignup422

    /**
 * @summary User sign up
 */
export const usePostAuthenticationSignup = <TError = PostAuthenticationSignup422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthenticationSignup>>, TError,{data: PostAuthenticationSignupBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthenticationSignup>>,
        TError,
        {data: PostAuthenticationSignupBody},
        TContext
      > => {

      const mutationOptions = getPostAuthenticationSignupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    